# Specifies the main domain where all Data Cellar services are hosted.
# Each participant will be assigned a unique subdomain under this main domain.
# Example: If DOMAIN_NAME is "my-datacellar.com", this participant might be "participant-a.my-datacellar.com".
DOMAIN_NAME=${DOMAIN_NAME}

# The base URL for the Data Cellar Identity Provider (IDP) API.
# The IDP is responsible for authenticating users and services within the ecosystem.
DATACELLAR_API_BASE_URL="${DATACELLAR_IDP_URL}/api/v1"

# The root directory for all files related to this specific participant.
# This helps keep each participant's configuration and data isolated.
PARTICIPANT_FOLDER="${PARTICIPANT_FOLDER}"

# A unique name to identify this participant.
# This is used to create subdomains and identify the participant in logs and services.
# Example: "participant-a"
PARTICIPANT_NAME="${PARTICIPANT_NAME}"

# The full web domain where this participant's Decentralized Identifier (DID) documents are published.
# DIDs are a new type of identifier for verifiable, decentralized digital identity.
# This URL makes it possible for others to look up this participant's public keys and service endpoints.
# It is automatically constructed from PARTICIPANT_NAME and DOMAIN_NAME.
DID_WEB_DOMAIN="${PARTICIPANT_NAME}.${DOMAIN_NAME}"

# Path to the directory containing initialization and operational scripts.
SCRIPTS_FOLDER="${PARTICIPANT_FOLDER}/scripts"

# Path to the configuration directory for the reverse proxy.
# The reverse proxy routes incoming traffic to the appropriate internal service.
PROXY_FOLDER="${PARTICIPANT_FOLDER}/reverse-proxy"

# Path to the directory where SSL/TLS certificates for the reverse proxy are stored.
PROXY_CERT_FOLDER="${PROXY_CERT_FOLDER}"

# Configuration of the Walt.id Wallet.
# The wallet is used to hold, manage, and issue Verifiable Credentials.
WALLET_FOLDER="${PARTICIPANT_FOLDER}/wallet"
WALTID_IMG_VERSION="1.0.2410150830-SNAPSHOT"
# The base URL for the Wallet's API, allowing other services to interact with it programmatically.
WALLET_API_BASE_URL="http://${PARTICIPANT_NAME}.wallet:7001"
# Default administrative user for the wallet.
WALLET_USER_NAME="admin"
WALLET_USER_EMAIL="admin.${PARTICIPANT_NAME}@datacellar.com"
WALLET_USER_PASSWORD="admin.${PARTICIPANT_NAME}_d@t@ce!!ar"

# Path to the configuration for the DID Server, which manages the participant's DID.
DID_SERVER_FOLDER="${PARTICIPANT_FOLDER}/did-server"

# The URL of the Universal Resolver service.
# This service is used to resolve DIDs from different decentralized networks into DID Documents.
UNIRESOLVER_URL="https://dev.uniresolver.io/1.0/identifiers"

# Path to the central storage directory for this participant's sensitive materials.
STORE_FOLDER="${PARTICIPANT_FOLDER}/store"
# Path to the directory where cryptographic certificates (like SSL/TLS) are stored.
CERT_FOLDER="${PARTICIPANT_FOLDER}/store/certs"
# Path to the directory for storing Verifiable Credentials.
CREDENTIALS_FOLDER="${PARTICIPANT_FOLDER}/store/credentials"

# A boolean toggle to control the certificate generation strategy.
# - If `true`, the system will attempt to obtain certificates from Let's Encrypt, a free, automated CA (recommended for production).
# - If `false`, the system will generate its own self-signed certificates (useful for local development).
USE_LETSENCRYPT=true

# The full filename for the participant's public SSL/TLS certificate.
PARTICIPANT_CERT="${PARTICIPANT_NAME}.${DOMAIN_NAME}.crt"
# The full filename for the participant's private SSL/TLS key.
PARTICIPANT_KEY="${PARTICIPANT_NAME}.${DOMAIN_NAME}.key"

# An alias used to identify the certificate within a Java KeyStore.
KEY_ALIAS="datacellar"
# The password for the Java KeyStore.
KEY_PASSW="datacellar"

# The Subject Distinguished Name (DN) for the self-signed certificate.
# This information helps identify the entity associated with the certificate, and the Common Name (CN) should match the participant's domain.
SUBJECT="/C=FR/ST=Toulouse/L=Labege/O=CEA/OU=CEA/CN=${PARTICIPANT_NAME}.${DOMAIN_NAME}"

# Path to the Credentials Manager configuration files.
CREDENTIALS_MANAGER_FOLDER="${PARTICIPANT_FOLDER}/credentials-manager"
# Docker image version for the Credentials Manager backend API.
CREDENTIALS_API_IMAGE_VERSION="1.0"
# Docker image version for the Credentials Manager frontend web UI.
CREDENTIALS_WEBUI_IMAGE_VERSION="1.0"

# The base URL of the Issuer service API, which is responsible for creating and signing Verifiable Credentials.
ISSUER_API_BASE_URL="${ISSUER_API_BASE_URL}"
# The DID of the Issuer, uniquely identifying the entity that signs the credentials.
ISSUER_DID="${ISSUER_DID}"
# The API key required to authorize requests to the Issuer API.
ISSUER_API_KEY="${ISSUER_API_KEY}"

# The base URL of the Verifier service API, which checks the validity of a credential.
# In this template, it is assumed to be the same as the Issuer, but it can be different.
VERIFIER_API_BASE_URL="${ISSUER_API_BASE_URL}"

# Path to the folder where the Data Cellar connector configuration is stored.
EDC_CONNECTOR_FOLDER="${PARTICIPANT_FOLDER}/edc-connector"

# Docker image and tag of the Data Cellar connector.
EDC_CONNECTOR_IMG="docker.io/agmangas/edc-connector"
EDC_CONNECTOR_IMG_VERSION="d55ddb9fa173f9ed3a2ca57188994d26110ffd54-ssi"

# These ports are used for communication between the EDC services and are not exposed publicly.
# They are mapped by the reverse proxy to standardized public-facing ports.
EDC_CONNECTOR_API_PORT=9191        # For general API interactions.
EDC_CONNECTOR_MANAGEMENT_PORT=9193 # For management and monitoring endpoints.
EDC_CONNECTOR_PROTOCOL_PORT=9194   # For the data plane protocol (e.g., IDS).
EDC_CONNECTOR_CONTROL_PORT=9192    # For control plane operations.
EDC_CONNECTOR_PUBLIC_PORT=9291     # For public-facing interactions.

# The API key used to secure the connector's management API.
EDC_CONNECTOR_API_KEY="datacellar"
# The HTTP header where the API key is expected.
EDC_CONNECTOR_API_KEY_HEADER="X-API-Key"

# The internal port where the connector's backend API is exposed.
EDC_BACKEND_PORT=28000

# Database credentials for the Data Cellar connector's PostgreSQL database.
EDC_POSTGRES_USER="postgres"
EDC_POSTGRES_PASSWORD="postgres"

# The URL pointing to an OpenAPI (Swagger) specification for a backend API.
# If this URL is provided, the connector can act as a "provider" by exposing this API to the data space.
# If left empty, the connector will operate only as a "consumer".
EDC_CONNECTOR_OPENAPI_URL="${CONNECTOR_OPENAPI_URL}"

# Credentials for the RabbitMQ message broker, used for asynchronous communication.
RABBITMQ_DEFAULT_USER="guest"
RABBITMQ_DEFAULT_PASS="guest"

# A boolean toggle to enable or disable the Common Data Environment (CDE) services.
USE_CDE="${USE_CDE}"
# Path to the CDE configuration files.
CDE_FOLDER="${PARTICIPANT_FOLDER}/cde"
# Docker image for the CDE platform.
CDE_IMAGE=ghcr.io/que-technologies/datacellar-cde:latest
# InfluxDB is used for storing time-series data from simulations and sensors.
CDE_INFLUXDB_URL=http://localhost:8086
CDE_INFLUXDB_TOKEN="${INFLUXDB_TOKEN}"
CDE_INFLUXDB_ORG=datacellar
CDE_INFLUXDB_BUCKET=cde
CDE_INFLUXDB_USERNAME="influx"
CDE_INFLUXDB_PASSWORD="${INFLUXDB_PASSWORD}"
# Internal and external API endpoints for the CDE.
CDE_INTERNAL_API_HOST=0.0.0.0:5000
CDE_EXTERNAL_API_HOST=0.0.0.0:5001
# Neo4j is used for storing and querying graph-based data models.
CDE_GRAPH_STORE_USER=neo4j
CDE_GRAPH_STORE_PASSWORD=neo4jpass
# Path to the SHACL file used for validating the structure of RDF data.
CDE_SHACL_FILE=data/shapes_v3.ttl
# Fuseki is an RDF triple store for storing and querying semantic data with SPARQL.
CDE_FUSEKI_USER=admin
CDE_FUSEKI_PASSWORD=fusekipass
CDE_FUSEKI_URL=http://fuseki:3030
CDE_FUSEKI_DATASET=cde
# Host and port bindings for the internal and external Flask APIs.
CDE_FLASK_RUN_HOST_INT=0.0.0.0
CDE_FLASK_RUN_PORT_INT=5000
CDE_FLASK_RUN_HOST_EXT=0.0.0.0
CDE_FLASK_RUN_PORT_EXT=5001

# Path to the participant-facing Web UI configuration files.
WEB_UI_FOLDER="${PARTICIPANT_FOLDER}/webui"
