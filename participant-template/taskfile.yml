---
#-------------------------------------------------------------------
# authors     [ Radhouene AZZABI ]
# contacts    [ azzabi.radhouene@cea.fr ]
# created     2024/10-15T12:12:24
# modified    2024/10-15T12:12:24
# version     1.0.0
#-------------------------------------------------------------------

version: "3"

dotenv: [".env"]

includes:
  wallet: "wallet/taskfile.yml"
  did-server: "did-server/taskfile.yml"
  proxy: "reverse-proxy/taskfile.yml"
  credentials-manager: "credentials-manager/taskfile.yml"
  connector: "edc-connector/taskfile.yml"
  cde: "cde/taskfile.yml"
  webui: "webui/taskfile.yml"

tasks:
  start-all:
    deps:
      - check-domain
      - check-api-key
      - config-all
    cmds:
      - task: generate-certs
      - task did-server:start
      - task wallet:start
      - task credentials-manager:start-api
      - task credentials-manager:provision-wallet
      - task: create-legalparticipant
      - task connector:start
      - task webui:start
      - cmd: sh -c '{{if eq .USE_CDE "true"}} echo "task cde:start" && task cde:start{{end}}'
      - cmd: sh -c '{{if eq .USE_CDE "true"}} echo "monitor CDE" && task monitor-cde-openapi &{{end}}'

  stop-all:
    cmds:
      - task credentials-manager:stop-api
      - task connector:stop
      - task wallet:stop
      - task did-server:stop
      - task webui:stop
      - task cde:stop

  config-all:
    cmds:
      - task did-server:config
      - task proxy:config
      - task wallet:config
      - task connector:config

  generate-certs:
    silent: true
    dir: "{{.CERT_FOLDER}}"
    postconditions:
      - test -f {{.DID_WEB_DOMAIN}}.key
      - test -f {{.DID_WEB_DOMAIN}}.crt
      - test -f cert.pfx
      - test -f vault.properties
    env:
      USE_LETSENCRYPT: true
      OUT_DIR: "."
    cmds:
      - |
        if [ "$USE_LETSENCRYPT" = "true" ]; then
          task import-certs
        fi
      - bash {{.SCRIPTS_FOLDER}}/prepare-certs.sh

  import-certs:
    silent: true
    dir: "{{.CERT_FOLDER}}"
    vars:
      PARTICIPANT_X5U: "{{.CREDENTIALS_FOLDER}}/.well-known/x5u.pem"
    postconditions:
      - test -f {{.DID_WEB_DOMAIN}}.key
      - test -f {{.DID_WEB_DOMAIN}}.crt
    cmds:
      - sudo cp {{.PROXY_CERT_FOLDER}}/{{.DID_WEB_DOMAIN}}/{{.PARTICIPANT_CERT}} .
      - sudo cp {{.PROXY_CERT_FOLDER}}/{{.DID_WEB_DOMAIN}}/{{.PARTICIPANT_KEY}} .
      - sudo chown {{.USER}}:{{.USER}} {{.PARTICIPANT_CERT}}
      - sudo chown {{.USER}}:{{.USER}} {{.PARTICIPANT_KEY}}
      - sudo cp {{.PARTICIPANT_CERT}} {{.PARTICIPANT_X5U}}
      - sudo chown {{.USER}}:{{.USER}} {{.PARTICIPANT_X5U}}
      - curl -s https://letsencrypt.org/certs/isrgrootx1.pem >> {{.PARTICIPANT_X5U}}

  create-legalparticipant:
    desc: "Create Legal Participant"
    silent: true
    cmds:
      - |
        read -p "Do you want to create a legal participant? (yes/no) [no]: " create_legal_participant
        create_legal_participant=${create_legal_participant:-no}

        if [ "$create_legal_participant" = "yes" ]; then
          echo "Creating legal participant..."
          cd $PARTICIPANT_FOLDER && task credentials-manager:create-legalparticipant
        fi

  monitor-cde-openapi:
    desc: Monitor CDE openapi spec and restart connector if changed
    silent: true
    cmds:
      - |
        echo "Monitoring OpenAPI spec changes..."
        echo $$ > /tmp/monitor_openapi.pid  # Save PID
        prev_hash=""
        while true; do
          current_hash=$(curl -s http://localhost:5001/openapi.json | sha256sum | cut -d ' ' -f1)
          if [ "$prev_hash" != "" ] && [ "$current_hash" != "$prev_hash" ]; then
            echo "OpenAPI spec changed, restarting connector..."
            task connector:restart
          fi
          prev_hash=$current_hash
          sleep 10
        done
  
  stop-monitor:
    desc: Stop OpenAPI monitor task
    silent: true
    cmds:
      - |
        if [ -f /tmp/monitor_openapi.pid ]; then
          kill $(cat /tmp/monitor_openapi.pid) && echo "Stopped monitor task."
          rm /tmp/monitor_openapi.pid
        else
          echo "No running monitor task found."
        fi

  upgrade:
    desc: "Upgrade the participant conponents"
    cmds:
      - task: stop-all
      - task: fetch-template
      - task credentials-manager:upgrade
      - task webui:upgrade
      - task wallet:upgrade
      - task did-server:upgrade
      - task connector:upgrade
      - task cde:upgrade
      
  fetch-template:
    desc: "Upgrade the participant conponents"
    silent: true
    env:
      PARTICIPANT_TEMPLATE: "{{.PARTICIPANT_TEMPLATE}}"
      PARTICIPANT_FOLDER: "{{.PARTICIPANT_FOLDER}}"
    cmds:
      - |
        cd $PARTICIPANT_TEMPLATE/.. && git pull
      - | 
        rsync -av \
        --exclude='store' \
        --exclude='wallet/waltid/data' \
        "$PARTICIPANT_TEMPLATE/" "$PARTICIPANT_FOLDER/"
  
  check-api-key:
    desc: "Check participant environment {{.DATACELLAR_IDP_URL}}"
    silent: true
    cmds:
      - |
        status=$(curl -s -o /dev/null -w "%{http_code}" \
          -X GET \
          "{{.ISSUER_API_BASE_URL}}/api/v2/participants" \
          -H 'accept: application/json' \
          -H 'X-API-KEY: {{.ISSUER_API_KEY}}')

        if [ "$status" -ne 200 ]; then
          RED="\033[31m"
          RESET="\033[0m"
          case "$status" in
            000) echo -e "${RED}API unreachable (network error or server down)${RESET}" ;;
            401) echo -e "${RED}Unauthorized: check your ISSUER_API_KEY${RESET}" ;;
            403) echo -e "${RED}Unauthorized: check your ISSUER_API_KEY${RESET}" ;;
            404) echo -e "${RED}Not found: endpoint may be incorrect${RESET}" ;;
            500) echo -e "${RED}Server error: something went wrong on the backend${RESET}" ;;
            *)   echo -e "${RED}Unexpected error: got HTTP $status (expected 200)${RESET}" ;;
          esac
          exit 1
        fi

  check-domain:
    desc: "Check if participant subdomain resolves in DNS {{.DID_WEB_DOMAIN}}"
    silent: true
    cmds:
      - |
        if getent hosts "{{.DID_WEB_DOMAIN}}" > /dev/null; then
          echo "Subdomain {{.DID_WEB_DOMAIN}} resolves"
        else
          echo "Subdomain {{.DID_WEB_DOMAIN}} does not resolve"
          exit 1
        fi 