#-------------------------------------------------------------------
# authors     [ Radhouene AZZABI ]
# contacts    [ azzabi.radhouene@cea.fr ]
# created     2024/10-15T12:12:24
# modified    2024/10-15T12:12:24
# version     1.0.0
#-------------------------------------------------------------------

version: "3"

tasks:

  setup-participant:
    desc: "Create a Data Cellar Dataspace participant"
    silent: true  
    cmds:
      - |
        export PARTICIPANT_NAME=""
        export PARTICIPANT_FOLDER=""
        
        read -p "Enter Participant Name (consumer): " participant_name
        participant_name=${participant_name:-consumer}

        read -p "Enter Domain Name (datacellar.cosypoc.ovh): " domain_name
        domain_name=${domain_name:-datacellar.cosypoc.ovh}

        read -p "Enter Participant Fodler (./participants): " participant_root_folder
        participant_root_folder=${participant_root_folder:-{{.USER_WORKING_DIR}}/participants}

        read -p "Enter proxy folder (~/datacellar/datacellar-mvd/reverse-proxy/caddy): " proxy_folder
        proxy_folder=${proxy_folder:-/home/debian/datacellar/datacellar-mvd/reverse-proxy/caddy}

        read -p "Use Let's Encrypt? (true/false) [true]: " use_letsncrypt
        use_letsncrypt=${use_letsncrypt:-true}

        read -p "Set DATACELLAR_IDP_URL (https://idp.datacellar.cosypoc.ovh): " datacellar_idp_url
        datacellar_idp_url=${datacellar_idp_url:-https://idp.datacellar.cosypoc.ovh}

        read -p "Set ISSUER_API_BASE_URL ($datacellar_idp_url): " issuer_api_url
        issuer_api_url=${issuer_api_url:-$datacellar_idp_url}

        read -p "Set ISSUER_DID (did:web:idp.datacellar.cosypoc.ovh:wallet-api:registry:01c06d48-6174-4323-a007-bd8af6d5b0c5): " issuer_did
        issuer_did=${issuer_did:-did:web:idp.datacellar.cosypoc.ovh:wallet-api:registry:01c06d48-6174-4323-a007-bd8af6d5b0c5}

        read -p "Set ISSUER_API_KEY (0164ca06-e718-49c5-8eb9-46e4a3fe1531): " issuer_api_key
        issuer_api_key=${issuer_api_key:-0164ca06-e718-49c5-8eb9-46e4a3fe1531}

        read -p "Set VERIFIER_API_BASE_URL ($datacellar_idp_url): " verifier_api_url
        verifier_api_url=${verifier_api_url:-$datacellar_idp_url}

        # Set the environment variables
        export PARTICIPANT_ROOT_FOLDER="$participant_root_folder"
        export PARTICIPANT_NAME="$participant_name"
        export DOMAIN_NAME="$domain_name"
        export PROXY_FOLDER="$proxy_folder"
        export USE_LETSENCRYPT="$use_letsncrypt"
        
        export DATACELLAR_IDP_URL="$datacellar_idp_url"
        
        export ISSUER_API_BASE_URL="$issuer_api_url"
        export ISSUER_DID="$issuer_did"
        export ISSUER_API_KEY="$issuer_api_key"

        export VERIFIER_API_BASE_URL="$verifier_api_url"

        # Construct paths and other derived variables
        PARTICIPANT_FOLDER="$PARTICIPANT_ROOT_FOLDER/$PARTICIPANT_NAME"
        PARTICIPANT_TEMPLATE='{{.USER_WORKING_DIR}}/../participant-template/'
        EXTERNAL_PROXY_FOLDER="$PROXY_FOLDER"
        PROXY_CERT_FOLDER="$PROXY_FOLDER/certs"

        # Export the derived variables
        export PARTICIPANT_FOLDER="$PARTICIPANT_FOLDER"
        export PARTICIPANT_TEMPLATE=$PARTICIPANT_TEMPLATE
        export EXTERNAL_PROXY_FOLDER="$EXTERNAL_PROXY_FOLDER"
        export PROXY_CERT_FOLDER="$PROXY_CERT_FOLDER"

        # Execute the commands using the gathered inputs and derived values
        echo "--------------------------------------------------------"
        echo "Setting up Datacellar participant"
        echo "--------------------------------------------------------"
        echo "Name" : $PARTICIPANT_NAME
        echo "Folder": $PARTICIPANT_FOLDER
        echo "Domain: $DOMAIN_NAME"
        echo "Proxy folder: $PROXY_FOLDER"
        echo "Using Let's Encrypt: $USE_LETSENCRYPT"

        sh -c '[ -d "$PARTICIPANT_FOLDER" ] && cd $PARTICIPANT_FOLDER && task stop-all || echo "" ' 
        sh -c '[ -d "$PARTICIPANT_FOLDER" ] && sudo rm -R $PARTICIPANT_FOLDER || echo ""'
        mkdir -p $PARTICIPANT_FOLDER
        cp -R $PARTICIPANT_TEMPLATE/* $PARTICIPANT_FOLDER/
        envsubst < $PARTICIPANT_TEMPLATE/.env.tmpl > $PARTICIPANT_FOLDER/.env

        cd $PARTICIPANT_FOLDER && task config-all
        cp $PARTICIPANT_FOLDER/reverse-proxy/caddy/conf.d/$PARTICIPANT_NAME.caddy $EXTERNAL_PROXY_FOLDER/conf.d/$PARTICIPANT_NAME.caddy
        docker compose -f $EXTERNAL_PROXY_FOLDER/../docker-compose.yml restart caddy

  
